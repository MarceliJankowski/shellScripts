#!/usr/bin/env bash

set -o nounset
set -o pipefail

source "$(dirname $0)/../lib.sh"

# to get info on this script run it with '-h' flag

##################################################
#                GLOBAL VARIABLES                #
##################################################

readonly MAX_ARG_COUNT=1

# options (can be set through CLI)
ABS_INPUT_PATH="$PWD"
LENIENT_MODE=$FALSE
REVERSE_OUTPUT_ORDER=$FALSE
OUTPUT_PATH_SEGMENT_DELIMITER='\n'

readonly MANUAL="
NAME
      $SCRIPT_NAME - split path into directory segments

SYNOPSIS
      $SCRIPT_NAME [-h] [-l] [-r] [-d delimiter] [path]

DESCRIPTION
      Split path (defaults to 'PWD') into individual directory segments it consists of.
      Provided path can be either relative or absolute (both must be enterable via 'cd' command).

      Example:
      - input: /home/user/dir
      - output:
        /home/user/dir
        /home/user
        /home
        /

OPTIONS
      -h
          Get help, print out the manual and exit.

      -l
          Turn on LENIENT_MODE.
          Absolute path is no longer required to be enterable via 'cd', it only has to begin with a '/'.

      -d delimiter
          Set output path segment delimiter.
          Defaults to '${OUTPUT_PATH_SEGMENT_DELIMITER}' because file names can contain spaces (those pesky spaces...).

      -r
          Reverse output order.

          Example:
          - input: /home/user/dir
          - reversed-output:
            /
            /home
            /home/user
            /home/user/dir

EXIT CODES
      Exit code indicates whether $SCRIPT_NAME successfully executed, or failed for some reason.
      Different exit codes indicate different failure causes:

      0  $SCRIPT_NAME successfully run, without raising any exceptions.

      $INVALID_FLAG_ERROR_CODE  Invalid flag supplied.

      $INVALID_ARG_ERROR_CODE  Invalid argument supplied.

      $MISSING_ARG_ERROR_CODE  Missing mandatory argument.

      $TOO_MANY_ARGS_ERROR_CODE  Too many arguments supplied (max number: ${MAX_ARG_COUNT}).

      $INTERNAL_ERROR_CODE  Developer fuc**d up, blame him!
"

##################################################
#                   FUNCTIONS                    #
##################################################

# @desc check if absolute `path` is valid, echo it out if it is and log error to stdout otherwise
# `path` is valid if it starts with '/' and is enterable via 'cd' (unless LENIENT_MODE is on)
# @return 0 if valid, 1 otherwise
isValidAbsPath() {
	[[ $# -ne 1 ]] && throwInternalErr "isValidAbsPath() expects 'path' argument"

	local -r path="$1"

	if [[ "$path" != /* ]]; then
		echo "'${path}' doesn't begin with a '/'"
		return 1
	fi

	if [[ $LENIENT_MODE -eq $FALSE ]]; then
		cd "$path" 2>/dev/null

		if [[ $? -ne 0 ]]; then
			echo "'${path}' can't be entered via 'cd'"
			return 1
		fi
	fi

	echo "$path"
}

# @desc resolve relative `path` into its absolute equivalent, log error to stdout in case of failure
# @return 0 on success, 1 on failure
resolveRelativePath() {
	[[ $# -ne 1 ]] && throwInternalErr "resolveRelativePath() expects 'path' argument"

	local -r path="$1"
	local resolved_path

	resolved_path=$(cd "$path" 2>/dev/null && pwd)

	if [[ $? -ne 0 ]]; then
		echo "'${path}' can't be entered via 'cd'"
		return 1
	fi

	echo "$resolved_path"
}

# @desc split absolute `path` into individual directory segments and print them out
# REVERSE_OUTPUT_ORDER and OUTPUT_PATH_SEGMENT_DELIMITER global variables influence output
splitAbsPathIntoSegments() {
	[[ $# -ne 1 ]] && throwInternalErr "splitAbsPathIntoSegments() expects 'path' argument"

	# there's nothing to spilt when path is the root directory
	[[ "$1" = '/' ]] && echo '/' && return

	local -r path=$(sed 's|/$||' <<<"$1") # strip optional '/' at the end of path
	local -r path_segment_count=$(echo "$path" | sed 's|/|\n|g' | wc -l)
	local path_segments=("$path")

	# buld path_segments array
	for ((i = $((path_segment_count - 2)); i > 0; i--)); do
		path_segments+=("$(sed -E 's|/[^/]+$||' <<<"${path_segments[-1]}")")
	done
	path_segments+=('/') # append root directory

	# print path_segment_array
	if [[ $REVERSE_OUTPUT_ORDER -eq $TRUE ]]; then
		for ((i = ${#path_segments[@]} - 1; i >= 0; i--)); do
			printf "%s${OUTPUT_PATH_SEGMENT_DELIMITER}" "${path_segments[$i]}"
		done
	else
		for path_segment in "${path_segments[@]}"; do
			printf "%s${OUTPUT_PATH_SEGMENT_DELIMITER}" "${path_segment}"
		done
	fi
}

##################################################
#             EXECUTION ENTRY POINT              #
##################################################

# handle flags
while getopts ':hlrd:' FLAG; do
	case "$FLAG" in
	h) printManual && exit 0 ;;
	l) LENIENT_MODE=$TRUE ;;
	r) REVERSE_OUTPUT_ORDER=$TRUE ;;
	d) OUTPUT_PATH_SEGMENT_DELIMITER="$OPTARG" ;;
	:) throwErr "flag '-${OPTARG}' requires argument" $MISSING_ARG_ERROR_CODE ;;
	?) throwErr "invalid flag '-${OPTARG}' supplied" $INVALID_FLAG_ERROR_CODE ;;
	esac
done

# turn options into constants
readonly LENIENT_MODE
readonly REVERSE_OUTPUT_ORDER
readonly OUTPUT_PATH_SEGMENT_DELIMITER

# remove flags, leaving script arguments
shift $((OPTIND - 1))

# check if too many arguments were supplied
[[ $# -gt $MAX_ARG_COUNT ]] &&
	throwErr "too many arguments supplied (max number: ${MAX_ARG_COUNT})" $TOO_MANY_ARGS_ERROR_CODE

# check if path argument was supplied
if [[ $# -eq 1 ]]; then

	# handle path being either relative or absolute
	if [[ "$1" = .* ]]; then
		ABS_INPUT_PATH=$(resolveRelativePath "$1")
		[[ $? -ne 0 ]] &&
			throwErr "invalid relative path argument: ${ABS_INPUT_PATH}" $INVALID_ARG_ERROR_CODE
	else
		ABS_INPUT_PATH=$(isValidAbsPath "$1")
		[[ $? -ne 0 ]] &&
			throwErr "invalid absolute path argument: ${ABS_INPUT_PATH}" $INVALID_ARG_ERROR_CODE
	fi
fi
readonly ABS_INPUT_PATH

splitAbsPathIntoSegments "$ABS_INPUT_PATH"

exit 0
